name: 'Deploy'

on:
  pull_request:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  deploy-client:
    runs-on: ubuntu-latest

    if: github.event.comment.body == '/deploy' && contains(fromJson('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Checkout Pull Request
        run: hub pr checkout ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          file: packages/client/docker/Dockerfile.prod
          tags: ${{ secrets.REGISTRY }}/client:sandbox
          build-args: |
            HOST=https://sandbox.tarrasque.app
            NODE_ENV=${{ secrets.NODE_ENV }}
            JWT_ACCESS_TOKEN_EXPIRATION_TIME=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION_TIME }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.KUBE_CLUSTER }}

      - name: Deploy to DigitalOcean Kubernetes
        run: |
          helm upgrade --install client ./helm/client --namespace sandbox-client --create-namespace \
            --set image.repository=${{ secrets.REGISTRY }}/client \
            --set image.tag=sandbox \
            --set env.HOST="https://sandbox.tarrasque.app" \
            --set env.NODE_ENV="${{ secrets.NODE_ENV }}" \
            --set env.JWT_ACCESS_TOKEN_EXPIRATION_TIME="${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION_TIME }}" \
            --set ingress.annotations."cert-manager\.io/cluster-issuer"="letsencrypt-staging" \
            --set ingress.hosts[0].host="sandbox.tarrasque.app",ingress.hosts[0].paths[0].path="/()(.*)",ingress.hosts[0].paths[0].pathType="Prefix" \
            --set ingress.tls[0].secretName="tls-secret-client",ingress.tls[0].hosts[0]="sandbox.tarrasque.app"

      - name: Verify deployment
        run: kubectl rollout status deployment/client --namespace sandbox-client --timeout 2m

  deploy-server:
    runs-on: ubuntu-latest

    if: github.event.comment.body == '/deploy' && contains(fromJson('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Checkout Pull Request
        run: hub pr checkout ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          file: packages/server/docker/Dockerfile.prod
          tags: ${{ secrets.REGISTRY }}/server:sandbox
          build-args: |
            HOST=https://sandbox.tarrasque.app
            NODE_ENV=${{ secrets.NODE_ENV }}
            VERBOSE=${{ secrets.VERBOSE }}
            COOKIE_SECRET=${{ secrets.COOKIE_SECRET }}
            JWT_ACCESS_TOKEN_SECRET=${{ secrets.JWT_ACCESS_TOKEN_SECRET }}
            JWT_ACCESS_TOKEN_EXPIRATION_TIME=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION_TIME }}
            JWT_REFRESH_TOKEN_SECRET=${{ secrets.JWT_REFRESH_TOKEN_SECRET }}
            JWT_REFRESH_TOKEN_EXPIRATION_TIME=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION_TIME }}
            JWT_GENERIC_TOKEN_SECRET=${{ secrets.JWT_GENERIC_TOKEN_SECRET }}
            JWT_GENERIC_TOKEN_EXPIRATION_TIME=${{ secrets.JWT_GENERIC_TOKEN_EXPIRATION_TIME }}
            STORAGE_PROVIDER=${{ secrets.STORAGE_PROVIDER }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_S3_ENDPOINT=${{ secrets.AWS_S3_ENDPOINT }}
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            AWS_S3_URL=${{ secrets.AWS_S3_URL }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            SMTP_FROM=${{ secrets.SMTP_FROM }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.KUBE_CLUSTER }}

      - name: Deploy to DigitalOcean Kubernetes
        run: |
          helm upgrade --install server ./helm/server --namespace sandbox-server --create-namespace \
            --set image.repository="${{ secrets.REGISTRY }}/server" \
            --set image.tag=sandbox \
            --set env.HOST="https://sandbox.tarrasque.app" \
            --set env.NODE_ENV="${{ secrets.NODE_ENV }}" \
            --set env.VERBOSE="${{ secrets.VERBOSE }}" \
            --set env.COOKIE_SECRET="${{ secrets.COOKIE_SECRET }}" \
            --set env.JWT_ACCESS_TOKEN_SECRET="${{ secrets.JWT_ACCESS_TOKEN_SECRET }}" \
            --set env.JWT_ACCESS_TOKEN_EXPIRATION_TIME="${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION_TIME }}" \
            --set env.JWT_REFRESH_TOKEN_SECRET="${{ secrets.JWT_REFRESH_TOKEN_SECRET }}" \
            --set env.JWT_REFRESH_TOKEN_EXPIRATION_TIME="${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION_TIME }}" \
            --set env.JWT_GENERIC_TOKEN_SECRET="${{ secrets.JWT_GENERIC_TOKEN_SECRET }}" \
            --set env.JWT_GENERIC_TOKEN_EXPIRATION_TIME="${{ secrets.JWT_GENERIC_TOKEN_EXPIRATION_TIME }}" \
            --set env.STORAGE_PROVIDER="${{ secrets.STORAGE_PROVIDER }}" \
            --set env.AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --set env.AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --set env.AWS_REGION="${{ secrets.AWS_REGION }}" \
            --set env.AWS_S3_ENDPOINT="${{ secrets.AWS_S3_ENDPOINT }}" \
            --set env.AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}" \
            --set env.AWS_S3_URL="${{ secrets.AWS_S3_URL }}" \
            --set env.DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --set env.SMTP_HOST="${{ secrets.SMTP_HOST }}" \
            --set env.SMTP_PORT="${{ secrets.SMTP_PORT }}" \
            --set env.SMTP_USERNAME="${{ secrets.SMTP_USERNAME }}" \
            --set env.SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}" \
            --set env.SMTP_FROM="${{ secrets.SMTP_FROM }}" \
            --set ingress.annotations."cert-manager\.io/cluster-issuer"="letsencrypt-staging" \
            --set ingress.hosts[0].host="sandbox.tarrasque.app",ingress.hosts[0].paths[0].path="/api(/|$)(.*)",ingress.hosts[0].paths[0].pathType="Prefix",ingress.hosts[0].paths[1].path="/socket.io(/|$)(.*)",ingress.hosts[0].paths[1].pathType="Prefix" \
            --set ingress.tls[0].secretName="tls-secret-server",ingress.tls[0].hosts[0]="sandbox.tarrasque.app"

      - name: Verify deployment
        run: kubectl rollout status deployment/server --namespace sandbox-server --timeout 2m

  deploy-tusd:
    runs-on: ubuntu-latest

    if: github.event.comment.body == '/deploy' && contains(fromJson('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Checkout Pull Request
        run: hub pr checkout ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.KUBE_CLUSTER }}

      - name: Deploy to DigitalOcean Kubernetes
        run: |
          helm upgrade --install tusd ./helm/tusd --namespace sandbox-tusd --create-namespace \
            --set env.AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --set env.AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --set env.AWS_REGION="${{ secrets.AWS_REGION }}" \
            --set env.AWS_S3_ENDPOINT="${{ secrets.AWS_S3_ENDPOINT }}" \
            --set env.AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}" \
            --set ingress.annotations."cert-manager\.io/cluster-issuer"="letsencrypt-staging" \
            --set ingress.hosts[0].host="sandbox.tarrasque.app",ingress.hosts[0].paths[0].path="/tus/files(/|$)(.*)",ingress.hosts[0].paths[0].pathType="Prefix" \
            --set ingress.tls[0].secretName="tls-secret-tusd",ingress.tls[0].hosts[0]="sandbox.tarrasque.app"

      - name: Verify deployment
        run: kubectl rollout status deployment/tusd --namespace sandbox-tusd --timeout 2m
